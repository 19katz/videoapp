{"version":3,"sources":["Lobby.js","Participant.js","Room.js","VideoChat.js","App.js","serviceWorker.js","index.js"],"names":["Lobby","username","handleUsernameChange","roomName","handleRoomNameChange","handleSubmit","onSubmit","htmlFor","type","id","value","onChange","required","Participant","participant","useState","videoTracks","setVideoTracks","setAudioTracks","videoRef","useRef","audioRef","trackpubsToTracks","trackMap","Array","from","values","map","publication","track","filter","useEffect","audioTracks","on","kind","v","a","removeAllListeners","videoTrack","attach","current","detach","className","identity","ref","autoPlay","muted","Room","token","handleLogout","room","setRoom","participants","setParticipants","remoteParticipants","key","sid","participantConnected","prevParticipants","participantDisconnected","p","Video","connect","name","then","forEach","currentRoom","localParticipant","state","tracks","trackPublication","stop","disconnect","onClick","VideoChat","setUsername","setRoomName","setToken","useCallback","event","target","preventDefault","fetch","method","body","JSON","stringify","headers","res","json","data","App","role","aria-label","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.050a55ee.chunk.js","sourcesContent":["import React from 'react';\n\nconst Lobby = ({\n  username,\n  handleUsernameChange,\n  roomName,\n  handleRoomNameChange,\n  handleSubmit\n}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Enter a room</h2>\n      <div>\n        <label htmlFor=\"name\">Name:</label>\n        <input\n          type=\"text\"\n          id=\"field\"\n          value={username}\n          onChange={handleUsernameChange}\n          required\n        />\n      </div>\n\n      <div>\n        <label htmlFor=\"room\">Room name:</label>\n        <input\n          type=\"text\"\n          id=\"room\"\n          value={roomName}\n          onChange={handleRoomNameChange}\n          required\n        />\n      </div>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nexport default Lobby;\n","import React, { useState, useEffect, useRef } from 'react';\n\nconst Participant = ({ participant }) => {\n  const [videoTracks, setVideoTracks] = useState([]);\n  const [audioTracks, setAudioTracks] = useState([]);\n    \n  const videoRef = useRef();\n  const audioRef = useRef();\n    \n    const trackpubsToTracks = trackMap => Array.from(trackMap.values())\n    .map(publication => publication.track)\n    .filter(track => track !== null);\n    \n    useEffect(() => {\n    const trackSubscribed = track => {\n      if (track.kind === 'video') {\n        setVideoTracks(videoTracks => [...videoTracks, track]);\n      } else {\n        setAudioTracks(audioTracks => [...audioTracks, track]);\n      }\n    };\n\n    const trackUnsubscribed = track => {\n      if (track.kind === 'video') {\n        setVideoTracks(videoTracks => videoTracks.filter(v => v !== track));\n      } else {\n        setAudioTracks(audioTracks => audioTracks.filter(a => a !== track));\n      }\n    };\n        \n        setVideoTracks(trackpubsToTracks(participant.videoTracks));\n          setAudioTracks(trackpubsToTracks(participant.audioTracks));\n\n          participant.on('trackSubscribed', trackSubscribed);\n          participant.on('trackUnsubscribed', trackUnsubscribed);\n\n          return () => {\n            setVideoTracks([]);\n            setAudioTracks([]);\n            participant.removeAllListeners();\n          };\n        }, [participant]);\n    \n    useEffect(() => {\n      const videoTrack = videoTracks[0];\n      if (videoTrack) {\n        videoTrack.attach(videoRef.current);\n        return () => {\n          videoTrack.detach();\n        };\n      }\n    }, [videoTracks]);\n    \n    return (\n      <div className=\"participant\">\n        <h3>{participant.identity}</h3>\n        <video ref={videoRef} autoPlay={true} />\n        <audio ref={audioRef} autoPlay={true} muted={true} />\n      </div>\n    );\n};\n\nexport default Participant;\n","import React, { useState, useEffect } from 'react';\nimport Video from 'twilio-video';\nimport Participant from './Participant';\n\nconst Room = ({ roomName, token, handleLogout }) => {\n    const [room, setRoom] = useState(null);\n    const [participants, setParticipants] = useState([]);\n\n    const remoteParticipants = participants.map(participant => (\n      <Participant key={participant.sid} participant={participant} />\n    ));\n    \n    useEffect(() => {\n    const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on('participantConnected', participantConnected);\n      room.on('participantDisconnected', participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n      \n      return () => {\n        setRoom(currentRoom => {\n          if (currentRoom && currentRoom.localParticipant.state === 'connected') {\n            currentRoom.localParticipant.tracks.forEach(function(trackPublication) {\n              trackPublication.track.stop();\n            });\n            currentRoom.disconnect();\n            return null;\n          } else {\n            return currentRoom;\n          }\n        });\n      };\n      }, [roomName, token]);\n\n    return (\n      <div className=\"room\">\n        <h2>Room: {roomName}</h2>\n        <button onClick={handleLogout}>Log out</button>\n        <div className=\"local-participant\">\n          {room ? (\n            <Participant\n              key={room.localParticipant.sid}\n              participant={room.localParticipant}\n            />\n          ) : (\n            ''\n          )}\n        </div>\n        <h3>Remote Participants</h3>\n        <div className=\"remote-participants\">{remoteParticipants}</div>\n      </div>\n    );\n};\n\nexport default Room;\n","import React, { useState, useCallback } from 'react';\nimport Lobby from './Lobby';\nimport Room from './Room';\n\nconst VideoChat = () => {\n    const [username, setUsername] = useState('');\n    const [roomName, setRoomName] = useState('');\n    const [token, setToken] = useState(null);\n    \n    const handleUsernameChange = useCallback(event => {\n      setUsername(event.target.value);\n    }, []);\n\n    const handleRoomNameChange = useCallback(event => {\n      setRoomName(event.target.value);\n    }, []);\n    \n    const handleSubmit = useCallback(async event => {\n      event.preventDefault();\n      const data = await fetch('/login', {\n        method: 'POST',\n        body: JSON.stringify({\n          identity: username,\n          room: roomName\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => res.json());\n      setToken(data.token);\n    }, [username, roomName]);\n    \n    const handleLogout = useCallback(event => {\n      setToken(null);\n    }, []);\n    \n    let render;\n    if (token) {\n      render = (\n        <Room roomName={roomName} token={token} handleLogout={handleLogout} />\n          );\n        } else {\n      render = (\n        <Lobby\n           username={username}\n           roomName={roomName}\n           handleUsernameChange={handleUsernameChange}\n           handleRoomNameChange={handleRoomNameChange}\n           handleSubmit={handleSubmit}\n        />\n      );\n    }\n    return render;\n};\n\nexport default VideoChat;\n","import React from 'react';\nimport './App.css';\nimport VideoChat from './VideoChat';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <header>\n        <h1>Video Chat with Hooks</h1>\n      </header>\n      <main>\n        <VideoChat />\n      </main>\n      <footer>\n        <p>\n          Made with{' '}\n          <span role=\"img\" aria-label=\"React\">\n            ⚛\n          </span>{' '}\n          by <a href=\"https://twitter.com/philnash\">philnash</a>\n        </p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}